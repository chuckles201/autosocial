---
date: '2024-12-18T21:26:37-05:00'
draft: false
title: 'Setting up Hugo PaperMod site!'

cover:
    image: images/pussinboots.png
    alt: "DOESNT LOAD"
    caption: "beautiful image of a real cat."

language: 'en-us'
tags: []
categories: []

# to actually hide
_build:
  list: false
  render: true
---

### New-posts:

To create posts, just use

    hugo new /posts/name.md

and then edit the markdown!


### Editing our themes/other settings:

Go into our config file, and follow documentation of your theme. Also, to add new link, just create the file, the url, and then link the layout to a folder in the theme!

```yml
menu:
    main:
        - identifier: categories
          name: Categories
          weight: 10
          url: /categories/
        - identifier: archives
          name: Archives
          weight: 20
          url: /archives/
        - identifier: tags
          name: Tags
          weight: 30
          url: /tags/


```

[more params:](https://github.com/adityatelange/hugo-PaperMod/wiki/Variables)

```yml
# parameters/theme-varaibles
params:
# title
homeInfoParams:
    Title: "I am Charlie."
    Content: "Welcome"
socialIcons:
    - name: github
      url: 'github.com'


# for image
cover:
    linkFullImages: True

# misc site-variables
ShowBreadCrumbs: False
ShowCodeCopyButtons: True

disableSpecial1stPost: True

# how to get commnents?
comments: True
```

## Uploading to Github
1. First, we intialize the repo chuckles201.github.io, which will be the link to our site.

2. We build our website in a different folder with the 'hugo' command

## ***Adding Latex/Code***
Now, we need to add functionality for latex for our site.

First, we create an extend_head.html file, and then we enable math: true in our config params portion.

$$
p(awesome_{latex})\ncong \sum_{3}^{4}\int_{assssss}^{}
$$

if we have $p(x) = \sum_{3}^{4}$ we can do inline latex!

which looks like:

    $$
    p(awesome_{latex})\ncong \sum_{3}^{4}\int_{assssss}^{}
    $$

    if we have $p(x) = \sum_{3}^{4}$ we can do inline latex!

### ***Adding Code***

Now, if we want to be able to add good-looking code, we can do the following with our params:

```yml
markup:
    highlight:
        codeFences: true        # Enable syntax highlighting for code fences
        guessSyntax: true       # Automatically detect language if not specified
        lineNos: true           # Display line numbers
        noClasses: false        # Use CSS classes instead of inline styles
        style: monokai          # Choose a theme (e.g., monokai, dracula, etc.)
```

and we can run

    hugo gen chromastyles -h

to see different styles.

Here is some code

```python
print("hello")

if function is false:
    return function
```


## Expanding/Contracting codeblocks

Now, let's add functionality to be able to specify for our content, when we want it to be collapsable.

To do this, we simply need to load the markdown as normal, but just surround it as folllows (when we build the site):

```html
<details><summary="hello"></summary>

...code here

</details>
```
.

Let's code a php file to check for the details part, and then we can implement it in our code!


{{<details open=true summary="Code">}}
```html
<details {{ if .Get "open" }}open{{ end }}>
    <summary>{{ .Get "summary" | default "Click to expand" }}</summary>
    {{ .Inner | markdownify }}
</details>
```
{{</details>}}

This code basically allows usability of 'details' html tag, and defines how it should be used.

We can also call it *inside* of code-blocks:

```python
{{< details open=true summary="python" class="collapsable">}}



import hello
import goodbye

def advice():
    return "make sure to include <highlight python>


{{< /details >}}
```

And for anything else:


{{<details open=false summary="Formula">}}
$$
p_n{4}
$$
{{</details>}}

### Highlighting for code-block

As you may have noticed, our code block did not higlight- that is becuse seemingly our text-inside is being rendered as raw-html.

So, we will neeed to wrap it with a div, and add higlighting as per normal markdown-code display.

First, we create our ```/partials/shortcode/div.html``` shortcode to allow us to include 'div' in our .md file. Shortcodes more broadly allow us to include any html in our markdown, but we must previously include it in our shortcodes file.




unfortunately, I could not find any good solutions, and I will have to fight this battle another day...
